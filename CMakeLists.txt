####################################################################################################
#                                                                                                  #
# SAMSON-Elements CMakeLists.txt file                                                              #
#                                                                                                  #
# This file was automatically generated by the SAMSON Element Generator the first time             #
# a SAMSON Element was generated in this folder. Each subsequent run appends a line to this file.  #
#                                                                                                  #
####################################################################################################


CMAKE_MINIMUM_REQUIRED ( VERSION 2.8.9 FATAL_ERROR )

IF( UNIX )
	IF( DEBUG ) 
		PROJECT (SAMSON-Developer-Tutorials-debug )
	ELSE( DEBUG ) 
		PROJECT ( SAMSON-Developer-Tutorials-release )
	ENDIF( DEBUG )
ELSE( UNIX )
	PROJECT ( SAMSON-Developer-Tutorials )
ENDIF( UNIX )

ADD_DEFINITIONS(-D SAMSON_BASE_BUILD)


########################### 
# GETTING SAMSON_SDK_PATH #
########################### 

IF( SAMSON_SDK_PATH )
	FILE( TO_CMAKE_PATH ${SAMSON_SDK_PATH} CMAKE_SAMSON_SDK_PATH )
ELSE( SAMSON_SDK_PATH )
	IF( DEFINED ENV{SAMSON_SDK_PATH} )
		FILE( TO_CMAKE_PATH $ENV{SAMSON_SDK_PATH} CMAKE_SAMSON_SDK_PATH )
		SET ( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SAMSON_SDK_PATH}" )
		INCLUDE ( CurrentSDKVersion )
		FILE( TO_CMAKE_PATH ${CMAKE_SAMSON_SDK_PATH}/${SELECTED_SDK_VERSION} CMAKE_SAMSON_SDK_PATH )
	ELSE( DEFINED ENV{SAMSON_SDK_PATH} )
		MESSAGE( "SAMSON_SDK_PATH is not defined" )
	ENDIF( DEFINED ENV{SAMSON_SDK_PATH} )
ENDIF( SAMSON_SDK_PATH )


#####################################
# GETTING QT5_CMAKE_INCLUDE_DIR VAR #
#####################################

IF( QT5_CMAKE_INCLUDE_DIR )
	FILE( TO_CMAKE_PATH ${QT5_CMAKE_INCLUDE_DIR} CMAKE_QT5_CMAKE_INCLUDE_DIR )
ELSE( QT5_CMAKE_INCLUDE_DIR )
	IF( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
		FILE( TO_CMAKE_PATH $ENV{QT5_CMAKE_INCLUDE_DIR} CMAKE_QT5_CMAKE_INCLUDE_DIR )
	ELSE( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
		MESSAGE( "QT5_CMAKE_INCLUDE_DIR is not defined" )
	ENDIF( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
ENDIF( QT5_CMAKE_INCLUDE_DIR )

SET ( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${CMAKE_QT5_CMAKE_INCLUDE_DIR} )
cmake_policy(SET CMP0020 NEW)


##############################
# GETTING WINSDK_LIB_DIR VAR #
##############################

IF( WIN32 )
	IF( DEFINED ENV{WINSDK_LIB_DIR} )
		FILE( TO_CMAKE_PATH $ENV{WINSDK_LIB_DIR} CMAKE_WINSDK_LIB_DIR )
	ELSE( DEFINED ENV{WINSDK_LIB_DIR} )
		MESSAGE( "WINSDK_LIB_DIR is not defined" )		
	ENDIF( DEFINED ENV{WINSDK_LIB_DIR} )
	SET ( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${CMAKE_WINSDK_LIB_DIR} )
ENDIF( WIN32 )

SET ( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SAMSON_SDK_PATH}/cmake" "${CMAKE_SAMSON_SDK_PATH}/cmake/Find" )
SET ( SAMSON_LIBRARIES_PATH "${CMAKE_SAMSON_SDK_PATH}/libs" )
SET ( SAMSON_INCLUDE_PATH "${CMAKE_SAMSON_SDK_PATH}/include/" )

INCLUDE ( SDKConfiguration )

IF( UUIDSETTINGS ) 
	INCLUDE ( SBPublicUUIDVar )
ELSE( UUIDSETTINGS ) 
	INCLUDE ( SBPublicVerboseVar )
ENDIF( UUIDSETTINGS )
INCLUDE ( SBPublicDefinitions )

INCLUDE ( SDKDeveloperDefinitions )
INCLUDE ( SDKFunctions )
INCLUDE ( SDKVersion )

MESSAGE( " " )
MESSAGE( "====================================  CMAKE REGISTER THESE PATHS  ====================================" )
MESSAGE( "     SAMSON_SDK_PATH                     = ${CMAKE_SAMSON_SDK_PATH} ")
MESSAGE( "     CMAKE_QT5_CMAKE_INCLUDE_DIR         = ${CMAKE_QT5_CMAKE_INCLUDE_DIR}" )
IF( WIN32 )
MESSAGE( "     CMAKE_WINSDK_LIB_DIR                = ${CMAKE_WINSDK_LIB_DIR}" )
ENDIF( WIN32 )
MESSAGE( "     CMAKE_SAMSON_DEVELOPPER_DATA_PATH   = ${CMAKE_SAMSON_DEVELOPPER_DATA_PATH}")
MESSAGE( "======================================================================================================" )
MESSAGE( " " )

FILE( TO_CMAKE_PATH ${CMAKE_SAMSON_DEVELOPPER_DATA_PATH}/Elements CMAKE_SAMSON_ELEMENT_PATH )
 
FIND_PACKAGE ( SAMSONSDK REQUIRED )

SET(CMAKE_AUTOMOC ON)

FIND_PACKAGE(Qt5Core REQUIRED) 
FIND_PACKAGE(Qt5Gui REQUIRED) 
FIND_PACKAGE(Qt5LinguistTools REQUIRED) 
FIND_PACKAGE(Qt5Multimedia REQUIRED) 
FIND_PACKAGE(Qt5MultimediaWidgets REQUIRED)
FIND_PACKAGE(Qt5Network REQUIRED)
FIND_PACKAGE(Qt5OpenGL REQUIRED) 
FIND_PACKAGE(Qt5PrintSupport REQUIRED)
FIND_PACKAGE(Qt5Sql REQUIRED) 
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Xml REQUIRED)

INCLUDE_DIRECTORIES(${Qt5Core_INCLUDE_DIRS})  
INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS}) 
INCLUDE_DIRECTORIES(${Qt5LinguistTools_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Multimedia_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5MultimediaWidgets_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Network_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5OpenGL_INCLUDE_DIRS}) 
INCLUDE_DIRECTORIES(${Qt5PrintSupport_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Sql_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS}) 
INCLUDE_DIRECTORIES(${Qt5Xml_INCLUDE_DIRS}) 

SET( QT_LIBRARIES	${Qt5Core_LIBRARIES}  
					${Qt5Gui_LIBRARIES} 
					${Qt5LinguistTools_LIBRARIES}
					${Qt5Multimedia_LIBRARIES} 
					${Qt5MultimediaWidgets_LIBRARIES} 
					${Qt5Network_LIBRARIES} 
					${Qt5OpenGL_LIBRARIES} 
					${Qt5PrintSupport_LIBRARIES}
					${Qt5Sql_LIBRARIES} 
					${Qt5Widgets_LIBRARIES}
					${Qt5Xml_LIBRARIES} 
)

FIND_PACKAGE ( OpenGL )

##########################
# SAMSON Element folders #
##########################

ADD_SUBDIRECTORY( AtomShaker )
ADD_SUBDIRECTORY( AtomPusher )
ADD_SUBDIRECTORY( EnergyConverter )
ADD_SUBDIRECTORY( EXYZImporter )
ADD_SUBDIRECTORY( EXYZExporter )
ADD_SUBDIRECTORY( VanDerWaals )
ADD_SUBDIRECTORY( Springs )
ADD_SUBDIRECTORY( SteepestDescent )
ADD_SUBDIRECTORY( MonteCarlo )

#ADD_SUBDIRECTORY( PyBindTutorial )
