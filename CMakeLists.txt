####################################################################################################
#                                                                                                  #
# SAMSON-Elements CMakeLists.txt file                                                              #
#                                                                                                  #
# This file was automatically generated by the SAMSON Extension Generator the first time           #
# a SAMSON Extension was generated in this folder. Each subsequent run appends a line to this file.#
#                                                                                                  #
####################################################################################################


CMAKE_MINIMUM_REQUIRED ( VERSION 2.8.9 FATAL_ERROR )

IF( UNIX )
	IF( DEBUG ) 
		PROJECT (SAMSON-Developer-Tutorials-debug )
	ELSE( DEBUG ) 
		PROJECT ( SAMSON-Developer-Tutorials-release )
	ENDIF( DEBUG )
ELSE( UNIX )
	PROJECT ( SAMSON-Developer-Tutorials )
ENDIF( UNIX )

ADD_DEFINITIONS(-D SAMSON_BASE_BUILD)


########################### 
# GETTING SAMSON_SDK_PATH #
########################### 

IF( SAMSON_SDK_PATH )
	FILE( TO_CMAKE_PATH ${SAMSON_SDK_PATH} CMAKE_SAMSON_SDK_PATH )
ELSE( SAMSON_SDK_PATH )
	IF( DEFINED ENV{SAMSON_SDK_PATH} )
		FILE( TO_CMAKE_PATH $ENV{SAMSON_SDK_PATH} CMAKE_SAMSON_SDK_PATH )
	ELSE( DEFINED ENV{SAMSON_SDK_PATH} )
		MESSAGE( "SAMSON_SDK_PATH is not defined, should be defined at cmake runtime or in environment variables" )
	ENDIF( DEFINED ENV{SAMSON_SDK_PATH} )
ENDIF( SAMSON_SDK_PATH )


#####################################
# GETTING QT5_CMAKE_INCLUDE_DIR VAR #
#####################################

IF( QT5_CMAKE_INCLUDE_DIR )
	FILE( TO_CMAKE_PATH ${QT5_CMAKE_INCLUDE_DIR} CMAKE_QT5_CMAKE_INCLUDE_DIR )
ELSE( QT5_CMAKE_INCLUDE_DIR )
	IF( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
		FILE( TO_CMAKE_PATH $ENV{QT5_CMAKE_INCLUDE_DIR} CMAKE_QT5_CMAKE_INCLUDE_DIR )
	ELSE( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
		MESSAGE( "QT5_CMAKE_INCLUDE_DIR is not defined, it should be defined at cmake runtime or in environment variables" )
	ENDIF( DEFINED ENV{QT5_CMAKE_INCLUDE_DIR} )
ENDIF( QT5_CMAKE_INCLUDE_DIR )

SET ( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${CMAKE_QT5_CMAKE_INCLUDE_DIR} )
cmake_policy(SET CMP0020 NEW)


##############################
# GETTING WINSDK_LIB_DIR VAR #
##############################

IF( WIN32 )
	IF( WINSDK_LIB_DIR )
		FILE( TO_CMAKE_PATH ${WINSDK_LIB_DIR} CMAKE_WINSDK_LIB_DIR )
	ELSE( QT5_CMAKE_INCLUDE_DIR )
		IF( DEFINED ENV{WINSDK_LIB_DIR} )
			FILE( TO_CMAKE_PATH $ENV{WINSDK_LIB_DIR} CMAKE_WINSDK_LIB_DIR )
		ELSE( DEFINED ENV{WINSDK_LIB_DIR} )
			MESSAGE( "WINSDK_LIB_DIR is not defined, it should be defined at cmake runtime or in environment variables" )		
		ENDIF( DEFINED ENV{WINSDK_LIB_DIR} )
	ENDIF( QT5_CMAKE_INCLUDE_DIR )
	SET ( CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${CMAKE_WINSDK_LIB_DIR} )
ENDIF( WIN32 )

SET ( CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SAMSON_SDK_PATH}/cmake" "${CMAKE_SAMSON_SDK_PATH}/cmake/Find" ${CMAKE_SOURCE_DIR})
SET ( SAMSON_LIBRARIES_PATH "${CMAKE_SAMSON_SDK_PATH}/libs" )
SET ( SAMSON_INCLUDE_PATH "${CMAKE_SAMSON_SDK_PATH}/include/" )


# VERSION_HASH information : New since SAMSON 0.8.0
#
# The maximum size of this variable is 63 Bytes ie char[63].
# We can embed into the extension file one string to identify it. Usualy we put the git commit hash or the svn revision number inside.
# The information is relevant only if the working copy is up to date and if everything is commited
# If you upload your extension on samson-connect.net, you will see this information next to your extension inside Accound > Developed extensions.

# you can choose either git either svn either nothing
SET ( USE_GIT 1 )
SET ( USE_SVN 0 )

IF( ${USE_GIT} )
	# if USE_GIT=1 the next command will get the current commit hash and will store 
	# it inside VERSION_HASH variable.
	MESSAGE( "Getting current git commit hash and storing it inside VERSION_HASH variable." )
	EXECUTE_PROCESS(
	  COMMAND git log -1 --format=%H
	  WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/SAMSON-Element
	  OUTPUT_VARIABLE VERSION_HASH
	  OUTPUT_STRIP_TRAILING_WHITESPACE
	 )
ELSE (${USE_GIT})
	IF (${USE_SVN})
		# if USE_SVN=1 and USE_GIT=0 the next command will get the current commit revision
		# of your working copy and will store it inside VERSION_HASH variable.
		MESSAGE( "Getting current svn revision and storing it inside VERSION_HASH variable." )
		find_package(Subversion)
		IF(SUBVERSION_FOUND)
		  Subversion_WC_INFO(${CMAKE_SOURCE_DIR} REPO)
		  SET ( VERSION_HASH ${REPO_WC_REVISION} )
		ENDIF()
	ELSE (${USE_SVN})
		# if USE_SVN=0 and USE_GIT=0 we set the variable VERSION_HASH equal to 
		# "undefined hash" or what you desire.
		SET(VERSION_HASH "undefined")
	ENDIF(${USE_SVN})
ENDIF(${USE_GIT})

# we create ElementVersionHash.cmake file in CMAKE_SOURCE_DIR folder containing the corresponding VERSION_HASH
# This file just creates add definition of SB_ELEMENT_VERSION_HASH accessible throught the code.
FILE ( WRITE ElementVersionHash.cmake "ADD_DEFINITIONS\(-DSB_ELEMENT_VERSION_HASH=\"${VERSION_HASH}\"\)\n" )

MESSAGE( "CMAKE_SOURCE_DIR ${CMAKE_SOURCE_DIR}")
MESSAGE( "CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}")


INCLUDE ( ElementVersionHash )

# End off VERSION_HASH information


INCLUDE ( SDKConfiguration )

IF( UUIDSETTINGS ) 
	INCLUDE ( SBPublicUUIDVar )
ELSE( UUIDSETTINGS ) 
	INCLUDE ( SBPublicVerboseVar )
ENDIF( UUIDSETTINGS )
INCLUDE ( SBPublicDefinitions )

INCLUDE ( SDKDeveloperDefinitions )
INCLUDE ( SDKFunctions )
INCLUDE ( SDKVersion )
INCLUDE ( SBOpenGLVersion )

MESSAGE( " " )
MESSAGE( "=======================================  CMAKE SUMMARY PATHS  ========================================" )
MESSAGE( "     SAMSON_SDK_PATH            = ${CMAKE_SAMSON_SDK_PATH} ")
MESSAGE( "     QT_CMAKE_INCLUDE_DIR      = ${CMAKE_QT_CMAKE_INCLUDE_DIR}" )
IF( WIN32 )
MESSAGE( "     WINSDK_LIB_DIR             = ${CMAKE_WINSDK_LIB_DIR}" )
ENDIF( WIN32 )
MESSAGE( "======================================================================================================" )
MESSAGE( " " )

FILE( TO_CMAKE_PATH ${CMAKE_SAMSON_DEVELOPPER_DATA_PATH}/Elements CMAKE_SAMSON_ELEMENT_PATH )
 
FIND_PACKAGE ( SAMSONSDK REQUIRED )

SET(CMAKE_AUTOMOC ON)

SET(QT_FRAMEWORKS
	Core
	Core5Compat
	Gui
	LinguistTools
	Multimedia
	MultimediaWidgets
	Network
	OpenGL
	OpenGLWidgets
	PrintSupport
	Sql
	Svg
	WebChannel
	WebEngineCore
	WebEngineQuick
	WebEngineWidgets
	Widgets
	Xml
)

foreach(FRAMEWORK ${QT_FRAMEWORKS})
    FIND_PACKAGE(Qt6${FRAMEWORK} REQUIRED) 
	INCLUDE_DIRECTORIES(${Qt6${FRAMEWORK}_INCLUDE_DIRS})
	SET( QT_LIBRARIES ${QT_LIBRARIES} ${Qt6${FRAMEWORK}_LIBRARIES})

endforeach()

FIND_PACKAGE ( OpenGL )

set(QT_V 6)

if(QT_V EQUAL 6)
    
    MESSAGE("OVERLOADING QT5 functions.")

    function(qt5_wrap_ui outfiles)
        message("OVERLOADED VERSION OF qt5_wrap_ui")
        qt_wrap_ui("${outfiles}" ${ARGN})
        set("${outfiles}" "${${outfiles}}" PARENT_SCOPE)
    endfunction()
    
    
    function(qt5_wrap_cpp outfiles)
        message("OVERLOADED VERSION OF qt5_wrap_cpp")
        qt_wrap_cpp("${outfiles}" ${ARGN})
        set("${outfiles}" "${${outfiles}}" PARENT_SCOPE)
    endfunction()
    
    function(qt5_add_resources)
        message("OVERLOADED VERSION OF qt5_add_ressources")
        qt_add_resources("${outfiles}" ${ARGN})
        set("${outfiles}" "${${outfiles}}" PARENT_SCOPE)
    endfunction()
    
    
    function(qt5_add_translation outfiles)
        message("OVERLOADED VERSION OF qt5_add_translation")
        qt_add_translation("${outfiles}" ${ARGN})
        set("${outfiles}" "${${outfiles}}" PARENT_SCOPE)
    endfunction()
    
endif()

############################
# SAMSON Extension folders #
############################

ADD_SUBDIRECTORY( AtomShaker )
ADD_SUBDIRECTORY( AtomPusher )
ADD_SUBDIRECTORY( Barycenter )
ADD_SUBDIRECTORY( CenterOfMass )
ADD_SUBDIRECTORY( EnergyConverter )
ADD_SUBDIRECTORY( EXYZExporter )
ADD_SUBDIRECTORY( EXYZImporter )
ADD_SUBDIRECTORY( VanDerWaals )
ADD_SUBDIRECTORY( Springs )
ADD_SUBDIRECTORY( SteepestDescent )
ADD_SUBDIRECTORY( MonteCarlo )
ADD_SUBDIRECTORY( PathGenerator )

#ADD_SUBDIRECTORY( PyBindTutorial )
